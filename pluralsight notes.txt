ASP .NET Core
    - it is a new cross platform framework that runs on Windows, Mac, Linux, 
    - it has fewer features than the full .net 4.6 framework
    - one reason you may not want to use .netcore is because you need a feature that .net 4.5 or 4.6 provides
    - there should be more features in the future

Features:
    - watches the file system
        - if you add or remvoe a file outside of VS, 
        it is automatically reflected in File Explorer and VS
        - if you change a web page while VS is running and refresh your browser, 
        the changed page automatically reflects changes made outside of VS
        - you do not need to explicitly build the code in VS
        - as long as the project is running without debugging, you can edit your files anywhere,
        refresh, and see the reflected changes in the browser
    - project.json
        - can manage your dependencies through dependencies section in project.json
        - interacts directly with nuget 
    - wwwroot 
        - from a hosting perspective this is the root of the website
        - static file that you want to serve over HTTP (image, stylesheets, and javascript)
        by default, you will want to place those here to make them available
    - Startup.cs
        - a lot of the configuration and startup code is placed here
        - ASP.NET will look for this file by convention
        - A configuration builder is used to read application settings
        - Configure Method
            -  used to configure the project at runtime
            - calls app.Run 
                 - This method allows you access to the HTTP context
                 - it is called for every HTTP request
                 - you can write to the context.Response body
        - Configure Services
            - this is the place to setup inversion of control for your application
    - web.config
        - this file no longer is used by ASP .NET to determine configurations for your project
        - this file only lets IIS know how to route requests to your ASP .NET Core application
        - all application settings should be in appsettings.json
        - it will nothing about this file by default
    
    - Middleware
        - assign certain pages to different HTTP status codes (app.UseStatusPage)
        - use a welcome page (app.UseWelcomePage)
            - you can pass it a page that it will respond to
                - only displayed when user navigates to that passed in url
        - developer exception page
        - most default middleware classes also have an options class that you can pass in  
            - app.UseWelcomePage(new WelcomePageOptions{});
        - app.UseDeveloperExceptionPage()
            - gives a full stack trace, query string details, cookies, and headers
        - app.UseExceptionHandler
            - reroutes request to a given path to be handled in a different way
            - can display a generic error page (given a route to a specific html page on the server)
            - can be passed ExceptionHandlerOptions
                - this class has an ExceptionHandler property that can be set to a custom exception handler 
        - app.UseStaticFiles
            - this is a middleware package that tells the application to search for static files to serve up in the wwwroot folder
            - it will try to map file names directly to the url (if i search from /index.html, 
            it will look for a file in wwwroot called index.html)
        - app.UseDefaultFiles
            - will look in wwwroot to see if there are any "default" files
            - default files are configurable, but index.html is default default 
    - Project Properties
        - you can set the type of environment in the build section
        - if the variable doesn't exist, production is assumed
        - the variable is set to 